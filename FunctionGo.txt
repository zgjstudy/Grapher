Visual 3D
项目成员：张冠杰
		  陈  亮
  夏锐航



  
 
目录：
项目名称
项目摘要
项目设计
功能概览
代码说明
测试流程
 
项目名称：Function Go
项目摘要：通过输入一个函数表达式将该函式的函数图像绘制出来。
		  Github地址：https://github.com/SCUTSSE/Visual3D
依赖：Win10SDK ver10.0.17134.0
opengl32.lib
glfw3.lib
glew32s.lib
glut32.lib
开发流程：
基于团队项目开发周期以及规模的考虑，我们小组决定按照Phased Prototype Model进行开发，其中囿于实际情景的限制由我们三位开发者扮演用户的角色向互相向其他人提出改进的建议。
首先我们分析了整个函数绘图应用的总体需求与定义，并将其分为函数解析，2D绘制以及3D绘制三个组成模块，之后每人负责一个模块进行深入的分析，包括设计算法以及设计测试等。开发过程中首先分析了每个模块的特点以及难点，在草做纲要之后商量互相之间的封装接口，之后着手代码开始实现相应的功能。
在各个模块基本功能初步实现并完成单元测试之后进行了一次联调，将此次联调中发现的一些问题向相应的组员反馈。每人在拿到反馈之后对代码进行重构以达到提高效率或优化体验的目的。
在完成以上步骤之后将项目精简生成release版本，作为ver1.0提交。
项目设计：
 项目亮点：
1、	设计了一门简洁直观的函数描述语言规范与用户的交互操作。（见【此处替换网址】syntax.md）
2、	采用树结构对函数进行解析。
3、	针对不同类型的函数进行定向优化。
4、	采用多线程充分利用系统资源提升运行速度。
5、	灵活应用opengl进行绘制函数，轴长等于定义域宽度，直观表达。
6、	给用户提供了直接方便并且有效的操作方式以便更好地观察函数。（见【此处替换网址】syntax.md）
功能概览：
1、	绘制任意给定二维函数图像，并支持缩放，旋转操作
2、	绘制三维函数图像，并支持缩放，旋转操作
代码说明：

绘制模块：
本代码封装了Grapher类充当OpenGL的深度自定义的shader。其主要函数有场景搭建函数initScene()和drawAxis()、标准化函数standardize()、着色函数drawFunction()和drawTri3D()、构造函数Grapher()。以下依次简略说明：

·场景搭建函数
  ·initScene() 用于初始化OpenGL的glfw、glut库，并且采用阴影平滑等个性设置。
  ·drawAxis() 用于描绘坐标轴与箭头，长度与输入函数定义域宽度一致
·标准化函数
  ·standardize() 用于对离散的点作适当的排序 可补充三角阵列分组
·着色函数
  ·drawFunction() 是一个汇合接口的函数，方便调用函数解析、2D绘图、3D绘图
  ·drawTri3D() 用于3D绘图
·构造函数
  ·Grapher() 有初始化窗口、设置、使用交互回调函数、构建轮询平台等功能

另外类外函数有：
  ·comp()：制定sort中的排序规则
  ·key_callback():制定交互回调函数的规则
  

测试流程：
单元测试：
•	函数解析模块
•	基本的常数函数
•	带有多项式的函数
•	含有括号改变运算优先级的函数
•	带超越函数的函数
•	带复合多项式的函数
•	带复合超越函数的函数
•	隐函数
•	不正确的函数
绘制模块
· 	引用OpenGL3d模型，检测openGl环境搭建是否正确
·	回调函数测试，测试交互过程是否正确
·	输入离散的点，检验连线是否正确
·	输入离散的点，检测三角剖分是否正确
·	输入简单二维表达式，检验二维绘图是否正确
·	输入复杂二维表达式，检验二维绘图是否正确
·	输入简单三维表达式，检验三维绘图是否正确
·	输入复杂三维表达式，检验三维绘图是否正确
·	搭建坐标轴场景，代入函数，定点检验场景是否正确
·	构建不同的函数检验3d感官增强模块的效果，并且选出最佳的颜色以及透明度
·	以上测试均添加放缩测试，检验放缩功能是否无误

·	以上测试均添加旋转测试，检验旋转功能是否无误



联合调试
输入已知图像的函数并将其与输出对比。



